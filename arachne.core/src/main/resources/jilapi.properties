#<CMND_KEY>.parser.type -> The parser type of the command.Currently, the following result types are suported:
    #tabular
    #chunked
    #nested
#<CMND_KEY>.entity.end -> The delimiter marking end of a complete entity can be demarked.Entity is a the smallest unit of useful data.
    #A command output can have multiple such entities.
    #Tabular parser only supports a new line as entity delimiter.So, this field need not be specified when parser is tabular.
    #Chunked parser works with block of meaningful data.So, entity delimiter need not be a new line.
#<CMND_KEY>.result.entity.field.delimiter -> The delimiter used to delimit across individual fields of a entity.This should be a unique character,
    # and should not be already present as part of the original output.The default field delimiter when not specified is SPACE.
#<CMND_KEY>.result.sections -> Useful when the command output has multiple sections.May not be applicable for all commands.
    #Please check the 'cmnd3' properties for a demo of the <CMND_KEY>.result.sections property.
#<CMND_KEY>.result.header ->  The output line preceding the start of the actual data.
#<CMND_KEY>.result.footer -> The output line following the end of the actual data.
#<CMND_KEY>.result.ignore -> The output line that needs to be ignored.May not be applicable for all commands.
#<CMND_KEY>.result.entity.field.positional.map -> A map representing the position of the fields of an entity in the output.May not be applicable for all commands.
    #This is mutually exclusive with result.entity.field.list.
    #The map should contain the field positions in ascending order. Eg : 1:fieldA,4:fieldB,10:fieldC is valid. But, 1:fieldA,10:fieldC,4:fieldB is invalid.
    #A single field can spawn across multiple positions (columns) in the output line.See cmnd1's buildTime for a sample of the same.
    #If exact field positioning not available, but instead search texts per field available in the output, then please use result.entity.field.list.
#<CMND_KEY>.result.stop -> If present, indicates where to stop parsing the given command output.Do not confuse this with footer, as with footer parsing will
#keep continuing till EOF, but with stop, parsng completely stops.
#<CMND_KEY>.result.entity.field.parser -> Implementation of com.github.binitabharati.jilapi.entity.parser.EntityParser.Applicable when the command parser type is chunked/nested. 
#<CMND_KEY>.nested.hierarchy.id -> Implementation of com.github.binitabharati.jilapi.parser.worker.NestedHierarchyIdentifier. Applicable when command parser type is Nested.
# This property gives a way to identify each element in a nested hierarchy.


#Delimiter to determine start and end of a complete entity. Default delimiter is a new line. i.e each line of the output is a meaningful complete entity.
result.entity.end=default
#Delimiter between individual fields of an entity, Default is SPACE.
result.entity.field.delimiter=default

#Kernel IP routing table
#Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
#0.0.0.0         10.0.2.2        0.0.0.0         UG    0      0        0 eth0
#10.0.2.0        0.0.0.0         255.255.255.0   U     0      0        0 eth0
#192.168.10.0    0.0.0.0         255.255.255.0   U     0      0        0 eth1
ipV4RouteTable.os.linux.parser.type=tabular
ipV4RouteTable.os.linux.result.header=Destination,Gateway,Genmask,Flags,Metric,Ref,Use,Iface
ipV4RouteTable.os.linux.result.entity.field.positional.map=1:destinationNw,2:gateway,3:netMask,5:metric,8:port

ipv4RouteDelete.os.linux.parser.type=tabular
ipv4RouteDelete.os.linux.result.header=Destination,Gateway,Genmask,Flags,Metric,Ref,Use,Iface
ipv4RouteDelete.os.linux.result.entity.field.positional.map=1:destinationNw,2:gateway,3:netMask,5:metric,8:port
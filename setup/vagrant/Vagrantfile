VAGRANTFILE_API_VERSION = "2"
#Refer to ND1.bmp for network topology refernce

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|


  config.vm.box = "ubuntu/trusty64"

    #net1 - 192.168.10.0/24
    #net1mc1	
    config.vm.define :net1mc1 do |net1mc1|
    net1mc1.vm.provider "virtualbox" do |v|
      #v.vmx["memsize"]  = "1048"
      #very useful to debug when VM start up gets stuck. This command will open up a console, and show the output as the VM gets installed.
	 #v.gui = true 
    end
    net1mc1.vm.provider :virtualbox do |v|
      v.name = "net1mc1"
      v.customize ["modifyvm", :id, "--memory", "1048"]
	 #v.gui = true

    end
    net1mc1.vm.network :private_network, ip: "192.168.10.12"
    net1mc1.vm.hostname = "net1mc1"
    net1mc1.vm.provision :shell, path: "target/scripts/non-router.sh"
    end

    #net1mc2	
    config.vm.define :net1mc2 do |net1mc2|
    #net1mc2.vm.provider "virtualbox" do |v|
      #v.vmx["memsize"]  = "1048"
	 #v.gui = true
    #end
    net1mc2.vm.provider :virtualbox do |v|
      v.name = "net1mc2"
      v.customize ["modifyvm", :id, "--memory", "1048"]
	 #v.gui = true
    end
    net1mc2.vm.network :private_network, ip: "192.168.10.13"
    net1mc2.vm.hostname = "net1mc2"
    net1mc2.vm.provision :shell, path: "target/scripts/non-router.sh"
    end


    #router1, n/wks : 192.168.10.0/24, 192.168.20.0.24, 192.168.40.0/24
    config.vm.define :router1 do |router1|
    router1.vm.provider :virtualbox do |v|
      v.name = "router1"
      v.customize ["modifyvm", :id, "--memory", "1048"]
	#v.gui = true
    end
    #Host only networking. Default netmask is 255.255.255.0
    router1.vm.network :private_network, ip: "192.168.10.11"
    router1.vm.network :private_network, ip: "192.168.20.11"
    router1.vm.network :private_network, ip: "192.168.40.11"
    router1.vm.hostname = "router1"
    router1.vm.provision :shell, path: "target/scripts/3PortRouter.sh"
    end
    
    
#net4mc1 - 192.168.40.0/24
    config.vm.define :net4mc1  do |net4mc1|
     net4mc1.vm.provider :virtualbox do |v|
      v.name = "net4mc1"
      v.customize ["modifyvm", :id, "--memory", "1048"]
	 #v.gui = true
    end
    net4mc1.vm.network :private_network, ip: "192.168.40.12"
    net4mc1.vm.hostname = "net4mc1"
    net4mc1.vm.provision :shell, path: "target/scripts/non-router.sh"
    end

    
    
    #net2 - 192.168.20.0/24
    #net2mc1	
    config.vm.define :net2mc1 do |net2mc1|
        net2mc1.vm.provider :virtualbox do |v|
      v.name = "net2mc1"
      v.customize ["modifyvm", :id, "--memory", "1048"]
    end
    net2mc1.vm.network :private_network, ip: "192.168.20.13"
    net2mc1.vm.hostname = "net2mc1"
    net2mc1.vm.provision :shell, path: "target/scripts/non-router.sh"
    end

     #net2mc2	
    config.vm.define :net2mc2 do |net2mc2|
    net2mc2.vm.provider :virtualbox do |v|
      v.name = "net2mc2"
      v.customize ["modifyvm", :id, "--memory", "1048"]
	 #v.gui = true
    end
    net2mc2.vm.network :private_network, ip: "192.168.20.14"
    net2mc2.vm.hostname = "net2mc2"
    net2mc2.vm.provision :shell, path: "target/scripts/non-router.sh"
    end


    #router2, n/wks - 192.168.20.0/24, 192.168.30.0/24	
    config.vm.define :router2 do |router2|
    router2.vm.provider :virtualbox do |v|
      v.name = "router2"
      v.customize ["modifyvm", :id, "--memory", "1048"]
      #v.gui = true
    end
    router2.vm.network :private_network, ip: "192.168.20.12"
    router2.vm.network :private_network, ip: "192.168.30.11"
    router2.vm.hostname = "router2"
    router2.vm.provision :shell, path: "target/scripts/2PortRouter.sh"
    end
    
    
    #router3, n/wks - 192.168.30.0/24, 192.168.40.0/24		
    config.vm.define :router3 do |router3|
    router3.vm.provider :virtualbox do |v|
      v.name = "router3"
      v.customize ["modifyvm", :id, "--memory", "1048"]
      #v.gui = true
    end
    router3.vm.network :private_network, ip: "192.168.30.12"
    router3.vm.network :private_network, ip: "192.168.40.13"
    router3.vm.hostname = "router3"
    router3.vm.provision :shell, path: "target/scripts/2PortRouter.sh"
    end

    #net3mc1	
    config.vm.define :net3mc1 do |net3mc1|
     net3mc1.vm.provider :virtualbox do |v|
      v.name = "net3mc1"
      v.customize ["modifyvm", :id, "--memory", "1048"]
	 #v.gui = true

    end
    net3mc1.vm.network :private_network, ip: "192.168.30.13"
    net3mc1.vm.hostname = "net3mc1"
    net3mc1.vm.provision :shell, path: "target/scripts/non-router.sh"
    end



   #workstation	
    config.vm.define :workstation do |workstation|
     workstation.vm.provider :virtualbox do |v|
      v.name = "workstation"
      v.customize ["modifyvm", :id, "--memory", "1048"]
	 #v.gui = true

    end
    workstation.vm.network :private_network, ip: "192.168.50.11"
    workstation.vm.hostname = "workstation"
    workstation.vm.provision :shell, path: "target/scripts/workStationConfig.sh"
    end

end